<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
                        
    <context:component-scan base-package="com.jinhan.ssm.controller"></context:component-scan>    
          
      <!-- ======================启动自动的消息转换========================================= -->           
     <bean
	      class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
     </bean>
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
                <bean
					class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
                <bean
					class="org.springframework.http.converter.StringHttpMessageConverter" >
					<property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>
					</bean>

			</list>
		</property>
	</bean>
	
	<!-- 配置webjars的资源访问映射 -->
	<!-- <mvc:annotation-driven/> -->
	<mvc:resources mapping="mySelf/webjars/**"
		location="classpath:META-INF/resources/webjars/">
		

		<!-- 必须加 mvc:resource-chain这个标签 （需要http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd这个版本的springmvc的结构定义）， 
			否则无法加载没有版本号的资源文件，http://blog.csdn.net/chao_1990/article/details/53449494 -->
		<mvc:resource-chain resource-cache="false"
			auto-registration="false">
			<mvc:resolvers>
				<bean
					class="org.springframework.web.servlet.resource.WebJarsResourceResolver"></bean>
				<bean
					class="org.springframework.web.servlet.resource.PathResourceResolver"></bean>
			</mvc:resolvers>
		</mvc:resource-chain>
	</mvc:resources>
	
	<mvc:resources location="mySelf/public/**" mapping="mySelf/public/" >
	</mvc:resources>
	
	<!-- 静态资源文件，不会被Spring MVC拦截 -->  
<mvc:resources mapping="/swagger/**" location="/swagger/" />  
	
	 
	
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		
		<property name="prefix" value="/page/"  />
		<property name="suffix" value=".jsp"  />
		<!-- 参考：http://www.blogjava.net/yongboy/archive/2011/01/03/346208.html -->
	</bean>
	
	
	<mvc:default-servlet-handler />
	<!-- 创建websocket的配置bean（java代码方式） -->
	<bean class="com.jinhan.ssm.javaConfig.WebsocketConfig"></bean>
	<!-- 将 springSwaggerConfig加载到spring容器 -->  
	<!-- <bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig" />   -->
	
	
	<!-- 将自定义的swagger配置类加载到spring容器 -->  
	<bean class="com.jinhan.ssm.javaConfig.SwaggerConfig" /> 
	
	
<!-- 	<bean class="javaConfig.MvcConfig"></bean> -->
	<!-- 创建websocket的配置bean(xml方式) -->
	<!-- <import resource="websocket.xml"/> -->
	

</beans>